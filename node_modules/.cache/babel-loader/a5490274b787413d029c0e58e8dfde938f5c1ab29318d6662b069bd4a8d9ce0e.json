{"ast":null,"code":"import { mapGetters } from 'vuex';\nimport NextButton from './button/NextButton.vue';\nimport Spinner from './spinner/Spinner.vue';\nexport default {\n  name: \"Question\",\n  components: {\n    NextButton,\n    Spinner\n  },\n  props: {\n    item: {\n      type: Object\n    },\n    cnt: {\n      type: Number\n    }\n  },\n  data() {\n    return {\n      radioData: \"\",\n      loading: false\n    };\n  },\n  computed: {\n    ...mapGetters(['getTopic']),\n    ...mapGetters(['getTopicCount']),\n    ...mapGetters(['getBoardInfo']),\n    getHref() {\n      const baseURL = this.cnt === this.getTopicCount.length ? 'board' : `question${this.cnt + 1}`;\n      return `#${baseURL}`;\n    }\n  },\n  methods: {\n    setRadio(evt) {\n      this.radioData = this.$refs[evt.target.id][0].textContent;\n    },\n    async setBoardInfo() {\n      this.$store.commit('SET_BOARD_INFO', this.radioData.trim());\n      this.loading = true;\n      if (this.getHref === '#board') {\n        const q = `${this.getTopic}:${this.getBoardInfo.join(\",\")}`;\n        setTimeout(async () => {\n          await this.$store.dispatch('FETCH_RESULT_SEARCH', q);\n          this.loading = false;\n        }, 3000);\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","NextButton","Spinner","name","components","props","item","type","Object","cnt","Number","data","radioData","loading","computed","getHref","baseURL","getTopicCount","length","methods","setRadio","evt","$refs","target","id","textContent","setBoardInfo","$store","commit","trim","q","getTopic","getBoardInfo","join","setTimeout","dispatch"],"sources":["src/components/Question.vue"],"sourcesContent":["<template>\n  <section class=\"panel spotlight medium right\" :id=\"`question${cnt}`\">\n    <div class=\"content span-10 text_center\">\n      <h2 class=\"major\">{{ getTopic }}</h2>\n      <div style=\"margin-bottom: 3rem;\">\n        검색결과 분석중\n      </div>\n      <div class=\"question_board\">\n        <div class=\"question_title\">{{ item.question }}</div>\n        <div>\n          <ul style=\"gap:1rem;\">\n            <li class=\"question_li\" v-for=\"(choice, idx) in item.choices\" :key=\"idx\">\n              <input\n                type=\"radio\"\n                :id=\"item.question + idx\"\n                :name=\"item.question\"\n                @change=\"setRadio($event)\"\n                class=\"color2\"\n              />\n              <label :for=\"item.question + idx\" :ref=\"item.question + idx\">\n                {{ choice }}\n              </label>\n            </li>\n          </ul>\n        </div>\n        <Spinner v-if=\"loading\" :loading=\"loading\" />\n        <NextButton v-else :id=\"getHref\" @setBoardInfo=\"setBoardInfo\"/>\n      </div>\n    </div>\n    <div class=\"image filtered tinted\" data-position=\"top left\">\n      <img src=\"images/background_230314.svg\" alt=\"커스텀 배경\" />\n    </div>\n  </section>\n</template>\n<script>\nimport { mapGetters } from 'vuex'\nimport NextButton from './button/NextButton.vue'\nimport Spinner from './spinner/Spinner.vue'\n\nexport default {\n  name: \"Question\",\n  components: {\n    NextButton,\n    Spinner\n  },\n  props: {\n    item: {\n      type: Object,\n    },\n    cnt: {\n      type: Number\n    }\n  },\n  data() {\n    return {\n      radioData: \"\",\n      loading: false\n    }\n  },\n  computed: {\n    ...mapGetters(['getTopic']),\n    ...mapGetters(['getTopicCount']),\n    ...mapGetters(['getBoardInfo']),\n    getHref() {\n      const baseURL = this.cnt === this.getTopicCount.length ? 'board' : `question${this.cnt + 1}`\n\n      return `#${baseURL}`\n    }\n  },\n  methods: {\n    setRadio(evt) {\n      this.radioData = this.$refs[evt.target.id][0].textContent\n    },\n    async setBoardInfo() {\n      this.$store.commit('SET_BOARD_INFO', this.radioData.trim())\n      this.loading = true\n      if (this.getHref === '#board') {\n        const q = `${this.getTopic}:${this.getBoardInfo.join(\",\")}`\n        setTimeout(async () => {\n          await this.$store.dispatch('FETCH_RESULT_SEARCH', q)\n          this.loading = false\n        }, 3000)\n      }\n    }\n  }\n}\n</script>\n<style scoped>\n.question_board {\n  background: linear-gradient(90deg, #ABE0F8 0%, #C8C6FF 100%);\n  opacity: 0.8;\n  border-radius: 1rem;\n  height: 40%;\n  padding: 1.5rem;\n}\n.question_title {\n  font-size: 1.2rem;\n  color: #fff;\n  font-weight: 600;\n  margin-bottom: 0.7rem;\n}\n.question_li {\n  width: 30%;\n}\ninput[type=\"radio\"] + label {\n  font-size: 1rem;\n  font-weight: 600;\n  min-width: 10rem;\n  padding-right: 0;\n  padding-left: 2rem;\n  text-align: left;\n}\n</style>"],"mappings":"AAmCA,SAAAA,UAAA;AACA,OAAAC,UAAA;AACA,OAAAC,OAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAH,UAAA;IACAC;EACA;EACAG,KAAA;IACAC,IAAA;MACAC,IAAA,EAAAC;IACA;IACAC,GAAA;MACAF,IAAA,EAAAG;IACA;EACA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,OAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAd,UAAA;IACA,GAAAA,UAAA;IACA,GAAAA,UAAA;IACAe,QAAA;MACA,MAAAC,OAAA,QAAAP,GAAA,UAAAQ,aAAA,CAAAC,MAAA,6BAAAT,GAAA;MAEA,WAAAO,OAAA;IACA;EACA;EACAG,OAAA;IACAC,SAAAC,GAAA;MACA,KAAAT,SAAA,QAAAU,KAAA,CAAAD,GAAA,CAAAE,MAAA,CAAAC,EAAA,KAAAC,WAAA;IACA;IACA,MAAAC,aAAA;MACA,KAAAC,MAAA,CAAAC,MAAA,wBAAAhB,SAAA,CAAAiB,IAAA;MACA,KAAAhB,OAAA;MACA,SAAAE,OAAA;QACA,MAAAe,CAAA,WAAAC,QAAA,SAAAC,YAAA,CAAAC,IAAA;QACAC,UAAA;UACA,WAAAP,MAAA,CAAAQ,QAAA,wBAAAL,CAAA;UACA,KAAAjB,OAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}